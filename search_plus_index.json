{"./":{"url":"./","title":"序言","keywords":"","body":"kubernetes-handbook kubernetes 实践手册 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-11-07 00:23:24 "},"helm/":{"url":"helm/","title":"概述","keywords":"","body":"概述 本手册关于 Helm 的内容是参考 https://docs.helm.sh/，并结合作者实际实践进行的归纳、整理和汇总而来，让 Helm 相关知识集中展现，作为个人使用笔记、手册。该内容将会不断更新、完善，旨在为 Helm 等使用、学习者提供更全面、更便捷的参考。 本手册是基于 Helm 3 进行介绍，建议你也选择 Helm 3。 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-11-07 00:23:24 "},"helm/helm-introduction.html":{"url":"helm/helm-introduction.html","title":"Helm 介绍","keywords":"","body":"Helm 介绍 Helm 是 Kubernetes 的包管理器，在 Kubernetes 下能够非常方便的完成应用的安装、卸载、升级等，是查看、分享和使用软件构建 Kubernetes 的最优方式，被广泛的使用。 图 2.2.1：Helm 1、背景 在 Kubernetes 环境中部署一个应用，需要 Kubernetes 原生资源 YAML 文件，如 Deployment、Service 或 Pod 等。对于一个应用而言，这些 Kubernetes 资源 YAML 文件都是十分分散的，不方便进行管理，通常直接通过 kubectl 命令来管理一个应用，你会发现这十分繁琐。 面对一个复杂的应用，会有很多类似的资源 YAML 文件，如果有更新或回滚应用的需求，可能要修改和维护所涉及的大量资源 YAML 文件，且由于缺少对发布过的应用版本管理和控制，使 Kubernetes 上的应用维护和更新等面临诸多的挑战，而 Helm 的出现可以帮助我们解决这些问题： 如何统一管理、配置和更新这些分散的 Kubernetes 的资源 YAML 文件 如何分发和复用一套应用模板 如何将应用的一系列资源 YAML 文件当做一个软件包管理 2、Helm 是什么？ Helm 是一个 Kubernetes 应用的包管理工具，用来管理 chart -- 预先配置好的安装包资源，有点类似于 Ubuntu 的 APT 和 CentOS 中的 YUM，使得对 Kubernetes 资源（Deployment、Service、ServiceAccount 等）的管理（存档、安装、卸载、升级等）变得更加简单、便捷。2019 年 11 月 13 日，Helm 3 发布，2020 年 4 月 30 日，从 CNCF 中毕业。 Helm chart 是用来将应用程序大量的 Kubernetes 资源 YAML 文件进行封装、模版化，在不同环境、场景下可根据配置快速部署你的应用，同时可将 chart 归档，并存储在 chart 仓库中，便于统一管理、分发。（将彻底释放繁琐、重复的 kubectl apply -f 动作，其中还伴随着对 YAML 文件中参数的调整。） 3、特点 Helm 有如下特点： 易管理：通过定义的 charts，可以将大量复杂应用的 Kubernetes 资源配置进行封装、模版化。 可升级：可就地升级，或自定义 hook 完成升级。 可分享：chart 支持版本化，可将其共享，并存储在 chart 仓库中，供不同环境、项目使用。 可回滚：使用 helm rollback 轻松回滚到旧版本。 4、Helm 架构 图 2.2.2：Helm 架构图（来自 IBM Developer Blog） 通过 Helm Client 可以从本地或远端的 Chart Repository 安装。当 chart 安装到 Kubernetes 中后就会创建一个 release，每次更新该 chart 的配置并执行 helm upgrade， release 的版本数就会加 1。 4.1 组件 Helm 分为两部分，由两个不同的组件组成： Helm Client：提供终端用户的命令行客户端。负责以下功能： 本地 chart 开发 管理 Repositories 管理 Releases 对接 Helm library 仓库 发送要安装的 charts 请求升级或者卸载已存在的 Releases Helm Library：提供执行所有 Helm 操作的逻辑，（在 Helm 2 中，以 Helm Server(Tiller)体现 ）。与 Kubernetes API Server 交互并提供以下功能： 结合 chart 和配置来构建一个 Release 在 Kubernetes 中安装 charts，并提供后续的 Release 对象 通过与 Kubernetes 交互来升级或者卸载 charts 独立的 Helm library 封装了 Helm 逻辑，以便可以由不同的客户端使用。 4.2 相关概念 Chart：Helm 的软件包，采用 tgz 格式文件归档，类似 apt 的 deb 包或者 yum 的 rpm 包，chart 包含了一组定义 kubernetes 资源相关的 YAML 文件。 Release：通过 helm install 命令安装后，生成在 kubernetes 集群中部署的 chart 就叫 Release。 Repository：Helm 的存储仓库，Repository 本质上是一个 Web 服务器，该服务器保存了一系列的 Chart 包以供用户下载，并且提供了一个该 Repository 的 Chart 包的清单文件以供查询。Helm 支持同时管理多个不同的 Repository。 4.3 实现 Helm 是基于 Go 语言实现。 Helm 使用 Kubernetes apimachinery 和 client-go 连接 Kubernetes 和管理 Release，将 Release 信息以 Kubernetes 的 Secrets、ConfigMap，内存或 SQL 进行存储。 基于上述的实现，在实际项目中可进行集成或二次开发对接。 参考 Helm 使用 Helm 管理 kubernetes 应用 Helm 介绍 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-11-07 00:23:24 "},"helm/quickstart.html":{"url":"helm/quickstart.html","title":"快速入门","keywords":"","body":"快速入门 介绍如何快速上手使用 Helm。 1、前提条件 在使用 Helm 前，需具备以下前提条件： 一个 Kubernetes 环境 2、Helm 版本选择 Helm 是基于 Kubernetes 之上实现的，在选择 Helm 版本时需要考虑对应的 Kubernetes 版本。 当一个 Helm 的新版本发布时，它会针对 Kubernetes 的一个特定的次版本进行编译。比如，Helm 3.0.0 与 Kubernetes 的 1.16.2 的客户端版本交互，一次可以兼容 Kubernetes 1.16。 对于最新 Helm 版本，建议使用当前 Kubernetes 的最新稳定版本。 如果您选择了一个 Kubernetes 版本不支持的 Helm 版本，在使用过程中将面临未知的风险。 建议参考下表，以满足与 Kubernetes 的兼容性： Helm 版本 支持的 Kubernetes 版本 3.7.x 1.22.x - 1.19.x 3.6.x 1.21.x - 1.18.x 3.5.x 1.20.x - 1.17.x 3.4.x 1.19.x - 1.16.x 3.3.x 1.18.x - 1.15.x 3.2.x 1.18.x - 1.15.x 更多参考 Helm 版本支持策略 2、安装 可以通过 homebrew （macOS 下包管理工具）下载二进制 Helm 安装包，也可以通过 Github 下载。 2.1 macOS $ brew install helm 2.2 二进制安装 每个 Helm 版本都提供了各种操作系统对应的二进制版本包，这些版本可以手动下载和安装。 下载所需的版本。 解压(如：tar -zxvf helm-v3.7.1-linux-amd64.tar.gz)。 在解压目录中找到 helm 程序，移动到需要的目录中(如：mv linux-amd64/helm /usr/local/bin/helm)。 更多安装方式参考：安装 Helm 3、初始化 当已经安装好 Helm 之后，可以添加一个 chart 仓库。可从 Artifact Hub 中查找有效的 Helm chart 仓库。 图 2.3.1：Artifact Hub TIP：通过 Artifact Hub 几乎可以找到任何想要的 chart 包，并能找到对应的源码(github 地址)，然后就可以参考、修改为定制化的 chart 啦！ $ helm repo add bitnami https://charts.bitnami.com/bitnami 当添加完成，您将可以看到可以被您安装的 charts 列表： $ helm search repo bitnami NAME CHART VERSION APP VERSION DESCRIPTION bitnami/bitnami-common 0.0.9 0.0.9 DEPRECATED Chart with custom templates used in ... bitnami/airflow 8.0.2 2.0.0 Apache Airflow is a platform to programmaticall... bitnami/apache 8.2.3 2.4.46 Chart for Apache HTTP Server bitnami/aspnet-core 1.2.3 3.1.9 ASP.NET Core is an open-source framework create... # ... and many more 4、安装 Chart 示例 通过 helm install 命令安装 chart。 Helm 可以通过多种途径查找和安装 chart，但最简单的是安装官方的 bitnami charts。 $ helm repo update # 确定我们可以拿到最新的 charts 列表 $ helm install bitnami/mysql --generate-name NAME: mysql-1612624192 LAST DEPLOYED: Sat Feb 6 16:09:56 2021 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: ... 在上面的例子中，bitnami/mysql 这个 chart 被发布，名字是 mysql-1612624192 您可以通过执行 helm show chart bitnami/mysql 命令简单的了解到这个 chart 的基本信息。 或者您可以执行 helm show all bitnami/mysql 获取关于该 chart 的所有信息。 每当您执行 helm install 的时候，都会创建一个新的发布版本。 所以一个 chart 在同一个集群里面可以被安装多次，每一个都可以被独立的管理和升级。 5、卸载 可以使用 helm uninstall 命令卸载你的版本。 $ helm uninstall mysql-1612624192 release \"mysql-1612624192\" uninstalled 该命令会从 Kubernetes 卸载 mysql-1612624192， 它将删除和该版本相关的所有相关资源（service、deployment、 pod 等）甚至版本历史。 如果您在执行 helm uninstall 的时候提供 --keep-history 选项， Helm 将会保存版本历史。 您可以通过命令查看该版本的信息 $ helm status mysql-1612624192 Status: UNINSTALLED ... 因为 --keep-history 选项会让 helm 跟踪你的版本（即使你卸载了他们），所以你可以审计集群历史甚至使用 helm rollback 回滚版本。 6、Helm 命令 如果您想通过 Helm 命令查看更多的有用的信息，请使用 helm -h 命令，或者在任意命令后添加 -h 选项： $ helm -h The Kubernetes package manager Common actions for Helm: - helm search: search for charts - helm pull: download a chart to your local directory to view - helm install: upload the chart to Kubernetes - helm list: list releases of charts Environment variables: | Name | Description | |------------------------------------|-----------------------------------------------------------------------------------| | $HELM_CACHE_HOME | set an alternative location for storing cached files. | | $HELM_CONFIG_HOME | set an alternative location for storing Helm configuration. | | $HELM_DATA_HOME | set an alternative location for storing Helm data. | | $HELM_DEBUG | indicate whether or not Helm is running in Debug mode | | $HELM_DRIVER | set the backend storage driver. Values are: configmap, secret, memory, sql. | | $HELM_DRIVER_SQL_CONNECTION_STRING | set the connection string the SQL storage driver should use. | | $HELM_MAX_HISTORY | set the maximum number of helm release history. | | $HELM_NAMESPACE | set the namespace used for the helm operations. | | $HELM_NO_PLUGINS | disable plugins. Set HELM_NO_PLUGINS=1 to disable plugins. | | $HELM_PLUGINS | set the path to the plugins directory | | $HELM_REGISTRY_CONFIG | set the path to the registry config file. | | $HELM_REPOSITORY_CACHE | set the path to the repository cache directory | | $HELM_REPOSITORY_CONFIG | set the path to the repositories file. | | $KUBECONFIG | set an alternative Kubernetes configuration file (default \"~/.kube/config\") | | $HELM_KUBEAPISERVER | set the Kubernetes API Server Endpoint for authentication | | $HELM_KUBECAFILE | set the Kubernetes certificate authority file. | | $HELM_KUBEASGROUPS | set the Groups to use for impersonation using a comma-separated list. | | $HELM_KUBEASUSER | set the Username to impersonate for the operation. | | $HELM_KUBECONTEXT | set the name of the kubeconfig context. | | $HELM_KUBETOKEN | set the Bearer KubeToken used for authentication. | Helm stores cache, configuration, and data based on the following configuration order: - If a HELM_*_HOME environment variable is set, it will be used - Otherwise, on systems supporting the XDG base directory specification, the XDG variables will be used - When no other location is set a default location will be used based on the operating system By default, the default directories depend on the Operating System. The defaults are listed below: | Operating System | Cache Path | Configuration Path | Data Path | |------------------|---------------------------|--------------------------------|-------------------------| | Linux | $HOME/.cache/helm | $HOME/.config/helm | $HOME/.local/share/helm | | macOS | $HOME/Library/Caches/helm | $HOME/Library/Preferences/helm | $HOME/Library/helm | | Windows | %TEMP%\\helm | %APPDATA%\\helm | %APPDATA%\\helm | Usage: helm [command] Available Commands: completion generate autocompletion scripts for the specified shell create create a new chart with the given name dependency manage a chart's dependencies env helm client environment information get download extended information of a named release help Help about any command history fetch release history install install a chart lint examine a chart for possible issues list list releases package package a chart directory into a chart archive plugin install, list, or uninstall Helm plugins pull download a chart from a repository and (optionally) unpack it in local directory repo add, list, remove, update, and index chart repositories rollback roll back a release to a previous revision search search for a keyword in charts show show information of a chart status display the status of the named release template locally render templates test run tests for a release uninstall uninstall a release upgrade upgrade a release verify verify that a chart at the given path has been signed and is valid version print the client version information Flags: --debug enable verbose output -h, --help help for helm --kube-apiserver string the address and the port for the Kubernetes API server --kube-as-group stringArray group to impersonate for the operation, this flag can be repeated to specify multiple groups. --kube-as-user string username to impersonate for the operation --kube-ca-file string the certificate authority file for the Kubernetes API server connection --kube-context string name of the kubeconfig context to use --kube-token string bearer token used for authentication --kubeconfig string path to the kubeconfig file -n, --namespace string namespace scope for this request --registry-config string path to the registry config file (default \"/Users/xcbeyond/Library/Preferences/helm/registry.json\") --repository-cache string path to the file containing cached repository indexes (default \"/Users/xcbeyond/Library/Caches/helm/repository\") --repository-config string path to the file containing repository names and URLs (default \"/Users/xcbeyond/Library/Preferences/helm/repositories.yaml\") Use \"helm [command] --help\" for more information about a command. Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-11-07 00:23:24 "},"helm/chart.html":{"url":"helm/chart.html","title":"Helm Charts","keywords":"","body":"Helm Charts Helm 是一个 Kubernetes 应用的包管理工具，常以 helm 命令来执行使用。而 Charts 则是预先配置好的安装包资源,常被称之为“chart”,可通过 helm create 命令创建一个空的 chart 文件结构。 本节将针对 chart 展开说明，讲述 chart 的格式，为使用 Helm 构建 chart 提供指导。 准备工作 chart 本质上是一系列的 Kubernetes 资源 YAML 文件（例如，Deployment、Service等），所以在正式编写chart之前，建议事先准备好符合 构建 chart Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-11-28 00:08:57 "},"faq/kube-apiserver-port-occupy.html":{"url":"faq/kube-apiserver-port-occupy.html","title":"kube-apiserver 6443 端口占用","keywords":"","body":"kube-apiserver 6443 端口占用 现象 kube-apiserver 不断重启，查看日志提示：6443 端口被占用。 failed to create listener: failed to listen on 0.0.0.0:6443: listen tcp 0.0.0.0:6443: bind: address already in use 解决方法 kill 掉现有 kube-apiserver 进程，重启 kubelet 服务即可。 # 查询 kube-apiserver 进程ID $ ps -ef | grep 6443 # kill 掉 $ kill -9 # 重启 kubelet $ service kubelet restart 参考 kubernetes: api-server and controller-manager cant start Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2021-11-24 17:21:26 "},"faq/the-kubernetes-certificate-expires.html":{"url":"faq/the-kubernetes-certificate-expires.html","title":"kubernetes证书过期问题","keywords":"","body":"kubernetes证书过期问题 现象 通过 kubeadm 安装 kubernetes 集群时会存在一个证书问题：由 kubeadm 生成的客户端证书在 1 年后到期。 随着 kubernetes 集群的使用，某一天证书过期了，此时 kubernetes 集群将无法正常使用，比如：kubectl 命令执行会产生错误（You must be logged in to the server(unauthorized)）、通过 k8s 接口访问资源时出现“证书过期”的错误等。 很明显，这是证书过期导致，只需更新证书即可。 k8s 为什么将客户端证书的有效期设置为 1 年呢？ kubeadm 会在控制面升级的时候更新所有证书。 如果你对此类证书的更新没有特殊要求， 并且定期执行 Kubernetes 版本升级（每次升级之间的间隔时间少于 1 年）， 则 kubeadm 将确保你的集群保持最新状态并保持合理的安全性。 最佳的做法是经常升级集群以确保安全。 解决方法 在实际中，如果遇到证书过期，则需手动更新证书，通过 kubeadm certs renew 命令手动更新你的证书。 查看证书过期时间。 在 Master 节点上，执行 kubeadm certs check-expiration 命令，查看证书过期时间。 输出类似以下内容： CERTIFICATE EXPIRES RESIDUAL TIME CERTIFICATE AUTHORITY EXTERNALLY MANAGED admin.conf Dec 30, 2020 23:36 UTC 364d no apiserver Dec 30, 2020 23:36 UTC 364d ca no apiserver-etcd-client Dec 30, 2020 23:36 UTC 364d etcd-ca no apiserver-kubelet-client Dec 30, 2020 23:36 UTC 364d ca no controller-manager.conf Dec 30, 2020 23:36 UTC 364d no etcd-healthcheck-client Dec 30, 2020 23:36 UTC 364d etcd-ca no etcd-peer Dec 30, 2020 23:36 UTC 364d etcd-ca no etcd-server Dec 30, 2020 23:36 UTC 364d etcd-ca no front-proxy-client Dec 30, 2020 23:36 UTC 364d front-proxy-ca no scheduler.conf Dec 30, 2020 23:36 UTC 364d no CERTIFICATE AUTHORITY EXPIRES RESIDUAL TIME EXTERNALLY MANAGED ca Dec 28, 2029 23:36 UTC 9y no etcd-ca Dec 28, 2029 23:36 UTC 9y no front-proxy-ca Dec 28, 2029 23:36 UTC 9y no 备份证书。 为防止更新证书等操作失败，关键操作前一定要进行备份。备份 /etc/kubernetes 目录： cp -r /etc/kubernetes /etc/kubernetes.old # 当升级证书失败时， 可以将此文件夹复原， 即可恢复原有集群 更新证书。 使用 kubeadm certs renew 命令来更新证书。 更新 ~/.kube/config 文件。 mv config config.old cp -i /etc/kubernetes/admin.conf $HOME/.kube/config chown $(id -u):$(id -g) $HOME/.kube/config sudo chmod 644 $HOME/.kube/config 重启。 重启 kube-apiserver,kube-controller,kube-scheduler,etcd 这4个容器： docker ps | grep -v pause | grep -E \"etcd|scheduler|controller|apiserver\" | awk '{print $1}' | awk '{print \"docker\",\"restart\",$1}' | bash 参考： 使用 kubeadm 进行证书管理 Copyright © xcbeyond.cn 2021 all right reserved，powered by Gitbook Updated at 2022-02-26 15:03:22 "}}